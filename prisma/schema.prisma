generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  username      String    @unique
  hashed_password String? @map("hashed_password")
  accounts      Account[]
  sessions      Session[]
  threads       Thread[]
  comments      Comment[]
  profile       Profile?
  posts         Post[]
  revisions     Revision[]
  createdAt     DateTime  @default(now())
}

model Profile {
  id         String  @id @default(cuid())
  userId     String  @unique @map("user_id")
  username   String? @unique
  avatar_url String?
  bio        String?
  is_admin   Boolean @default(false) @map("is_admin")
  two_factor_enabled Boolean @default(false) @map("two_factor_enabled")
  two_factor_secret  String? @map("two_factor_secret")
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Thread {
  id          String   @id @default(uuid())
  title       String
  category    String
  authorId    String
  author      User     @relation(fields: [authorId], references: [id])
  comments    Comment[]
  createdAt   DateTime @default(now())
}

model Comment {
  id          String   @id @default(uuid())
  message     String
  threadId    String
  thread      Thread   @relation(fields: [threadId], references: [id])
  authorId    String
  author      User     @relation(fields: [authorId], references: [id])
  createdAt   DateTime @default(now())
}

model Post {
  id              String    @id @default(uuid())
  title           String
  slug            String    @unique
  content         String    @db.Text
  excerpt         String?   @db.Text
  image_urls      String[]  @map("image_urls")
  author_id       String    @map("author_id")
  author          User      @relation(fields: [author_id], references: [id], onDelete: Cascade)
  published       Boolean   @default(false)
  published_at    DateTime? @map("published_at")
  publish_at      DateTime? @map("publish_at")
  created_at      DateTime  @default(now()) @map("created_at")
  updated_at      DateTime  @updatedAt @map("updated_at")
  category        String
  meta_title      String?   @map("meta_title")
  meta_description String?  @map("meta_description")
  tags            String[]
  views           Int       @default(0)
  likes           Int       @default(0)
  revisions       Revision[]
  
  @@index([published, published_at])
  @@index([category])
  @@index([author_id])
}

model Revision {
  id          String   @id @default(uuid())
  post_id     String   @map("post_id")
  post        Post     @relation(fields: [post_id], references: [id], onDelete: Cascade)
  author_id   String   @map("author_id")
  author      User     @relation(fields: [author_id], references: [id], onDelete: Cascade)
  content     String   @db.Text
  title       String
  excerpt     String?  @db.Text
  meta_title  String?  @map("meta_title")
  meta_description String? @map("meta_description")
  tags        String[]
  created_at  DateTime @default(now()) @map("created_at")
  
  @@index([post_id])
  @@index([author_id])
}

model AdminSession {
  id        String   @id @default(uuid())
  user_id   String   @map("user_id")
  token     String   @unique
  expires_at DateTime @map("expires_at")
  created_at DateTime @default(now()) @map("created_at")
  
  @@index([user_id])
  @@index([token])
}
